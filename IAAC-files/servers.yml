---
Description: >
    project 2 solution, servers setup

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
## security group, roles, policy, ec2 instance profile and launch config
  SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: security group with rules for http
      GroupName: http-security-group
      SecurityGroupEgress: 
        - Description: allow all protocols on all ports
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0          
      SecurityGroupIngress: 
        - Description: allowing http traffic
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
      VpcId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCID" 

  UdacityS3ReadOnlyEC2:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      RoleName: UdacityS3ReadOnlyEC2
      Path: "/"
  S3ReadOnlyPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource: "arn:aws:s3:::*"
      Roles: 
        - Ref: "UdacityS3ReadOnlyEC2"
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2

  LaunchConfiguration1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: '10'
            VolumeType: standard
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: ami-000340e2c761dddcd
      InstanceType: t2.medium
      LaunchConfigurationName: launch-config-1
      SecurityGroups: 
        - !Ref SecurityGroup1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
## autoscaling, target group, load balancer, listener and listener rules 
  AutoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-SUBNET1"
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-SUBNET2"
      LaunchConfigurationName:
        Ref: LaunchConfiguration1
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: TargetGroup1
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB

  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  LoadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-SUBNET1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-SUBNET2"
      SecurityGroups:
      - Ref: SecurityGroup1
  
  LoadBalancer1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup1
      LoadBalancerArn:
        Ref: LoadBalancer1
      Port: '80'
      Protocol: HTTP

  ALBListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup1'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'LoadBalancer1Listener'
      Priority: 1
Outputs: 
  WebAppIP: 
    Description: The DNS of the load balancer
    Value: !Sub 
      - 'http://${Domain}'
      - Domain: !GetAtt LoadBalancer1.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-WebAppIP

